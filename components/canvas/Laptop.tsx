import * as THREE from "three";
import React, { Suspense, useEffect, useRef, useState } from "react";
import { Canvas, useFrame, useLoader } from "@react-three/fiber";
import { Environment, useGLTF, ContactShadows } from "@react-three/drei";
import { useSpring } from "@react-spring/core";
import { a as three } from "@react-spring/three";
import { animated, a as web } from "@react-spring/web";
import { TextureLoader } from "three";
import { skills } from "@/data";

function Model({ open, hinge, logoUrl, ...props }) {
	const group = useRef();
	// Load model
	const { nodes, materials } = useGLTF("/mac-draco.glb");

	const logoTexture = useLoader(TextureLoader, logoUrl);

	// Fix texture flipping issue
	logoTexture.flipY = false;

	// Take care of cursor state on hover
	const [hovered, setHovered] = useState(false);
	useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered]);
	// Make it float in the air when it's opened
	useFrame((state) => {
		const t = state.clock.getElapsedTime();
		group.current.rotation.x = THREE.MathUtils.lerp(
			group.current.rotation.x,
			open ? Math.cos(t / 10) / 10 + 0.25 : 0,
			0.1
		);
		group.current.rotation.y = THREE.MathUtils.lerp(
			group.current.rotation.y,
			open ? Math.sin(t / 10) / 4 : 0,
			0.1
		);
		group.current.rotation.z = THREE.MathUtils.lerp(
			group.current.rotation.z,
			open ? Math.sin(t / 10) / 10 : 0,
			0.1
		);
		group.current.position.y = THREE.MathUtils.lerp(
			group.current.position.y,
			open ? (-2 + Math.sin(t)) / 3 : -4.3,
			0.1
		);
	});
	// The view was auto-generated by: https://github.com/pmndrs/gltfjsx
	// Events and spring animations were added afterwards
	return (
		<group
			ref={group}
			{...props}
			onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
			onPointerOut={(e) => setHovered(false)}
			dispose={null}
		>
			<three.group
				rotation-x={hinge}
				position={[0, -0.04, 0.41]}
			>
				<group
					position={[0, 2.96, -0.13]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<mesh
						material={materials.aluminium}
						geometry={nodes["Cube008"].geometry}
					/>
					<mesh
						material={materials["matte.001"]}
						geometry={nodes["Cube008_1"].geometry}
					/>
					<mesh geometry={nodes["Cube008_2"].geometry}>
						<meshBasicMaterial map={logoTexture} />
					</mesh>
				</group>
			</three.group>
			<mesh
				material={materials.keys}
				geometry={nodes.keyboard.geometry}
				position={[1.79, 0, 3.45]}
			/>
			<group position={[0, -0.1, 3.39]}>
				<mesh
					material={materials.aluminium}
					geometry={nodes["Cube002"].geometry}
				/>
				<mesh
					material={materials.trackpad}
					geometry={nodes["Cube002_1"].geometry}
				/>
			</group>
			<mesh
				material={materials.touchbar}
				geometry={nodes.touchbar.geometry}
				position={[0, -0.03, 1.2]}
			/>
		</group>
	);
}

export default function Laptop() {
	// This flag controls open state, alternates between true & false
	const [open, setOpen] = useState(false);
	const [currentIndex, setCurrentIndex] = useState(0);

	// const handleClick = () => {
	// 	const newOpen = open.map((state, i) => (i === index ? !state : state)); // Toggle the clicked model, keep others unchanged
	// 	setOpen(newOpen);
	// };
	// We turn this into a spring animation that interpolates between 0 and 1
	const props = useSpring({ open: Number(open) });

	useEffect(() => {
		const interval = setInterval(() => {
			setCurrentIndex((prevIndex) => (prevIndex + 1) % skills.length); // Loop through the list
		}, 3000); // 3 seconds

		return () => clearInterval(interval); // Cleanup the interval on component unmount
	}, []);

	return (
		<div className="w-full h-full justify-center z-100">
			{!open && (
				<h2 className="font-bold text-center text-white-100 absolute bottom-40 left-1/2 transform -translate-x-1/2">
					Click Me!
				</h2>
			)}
			<animated.section
				style={{
					background: props.open.to([0, 1], ["#28035F", "#d25578"]),
					margin: "0 20px",
				}}
				className={`h-full`}
			>
				<Canvas
					className="w-full h-full z-100"
					dpr={[1, 2]}
					camera={{ position: [0, 10, -100], fov: 100 }}
				>
					<three.pointLight
						position={[10, 10, 10]}
						intensity={1.5}
						color={props.open.to([0, 1], ["#000", "#d25578"])}
					/>
					<Suspense fallback={null}>
						<group
							scale={[15, 15, 5]}
							position={[0, 0, 0]}
							rotation={[0, Math.PI, 0]}
							onClick={(e) => (e.stopPropagation(), setOpen(!open))} // Handle click for the individual model
						>
							<Model
								open={open} // Pass the individual open state
								hinge={props.open.to([0, 1], [1.575, -0.425])}
								logoUrl={skills[currentIndex].logoUrl}
							/>
						</group>
						<Environment preset="city" />
					</Suspense>
					<ContactShadows
						position={[0, -4.5, 0]}
						opacity={0.4}
						scale={20}
						blur={1.75}
						far={4.5}
					/>
				</Canvas>
			</animated.section>
			{/* );
			})} */}
		</div>
	);
}
